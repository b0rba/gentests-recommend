Class, Method, Line, LineContent, Observation, Diagnosis, Action

com.ib.client.EReader, run, 97, "if (stopRequested) {",
every call to run() results in NPE on variable of type DataInputStream,  Unable to create (non-null) DataInputStream, added new object

      public static DataInputStream disOne() {
        return new DataInputStream(new StringBufferInputStream("123"));
      }

com.ib.client.EWrapper, stopRequested, 72, "stopRequested()",
every call to run() results in NPE on variable of type EWrapper, Unable to create (non-null) EWrapper, added new object


      public static EWrapper eWrapperOne() { return new ...}

com.ib.client.EReader, readStr, 902, "if (c == 0) {", every call to
readStr(DataInputStream) raises java.io.Exception captured at EReader.run:102, DataInputStream object with invalid data, modified string 

      public static DataInputStream disOne() {
        return new DataInputStream(new StringBufferInputStream("123\0"));
      }


com.ib.client.EReader, processMsg, 114, "case TICK_PRICE: {", every
call to processMsg(123) raises com.ib.client.EException captured at EReader.run:102, DataInputStream with invalid data, modified string

      public static DataInputStream disOne() {
        return new DataInputStream(new StringBufferInputStream("1\0"));
      }

com.ib.client.EReader, processMsg, 123, "int canAutoExecute = 0;",
every call to processMsg(1) raises java.io.Exception captured at EReader.run:102, DataInputStream with invalid data, modified string

                      
      public static DataInputStream disOne() {
        // Expressing these \0s in a single string does not work. It thinks "\03" is the string "\3" or something.
        String all = "1" + "\0" + "2" + "\0" + "3" + "\0" + "4" + "\0" + "2.97" + "\0";
        return new DataInputStream(new StringBufferInputStream(all));
      }
com.ib.client.EReader, processMsg, 159, "int version = readInt();", every time processMsg() is called it receives the same input, which makes it execute only one case.

  Adding a appropriate value data to cover ACCT_VALUE, this is the case of number 6 and needs a version number higher then one:

      public static DataInputStream acctValue() {
        String act = "6";
        String version = "2";
        String key = "key";
        String val = "val";
        String cur = "cur";
        String accountName = "Name";
        String input = act + "\0" + version + "\0" + key + "\0" + val + "\0" + cur + "\0" + accountName + "\0";

        return new DataInputStream(new StringBufferInputStream(input));
      }

  Adding a appropriate value data to cover ORDER_STATUS, this is the case of number 3, and has 5 if's.
  which means that if version number is higher then 5 to cover all cases.

      public static DataInputStream orderStatus() {
        String switchCase = "3", version = "6", id = "2", status = "status", filled = "7", remaining = "8", avgFillPrice = "2.64";
	  String input = switchCase + "\0" + version + "\0" + id + "\0" + status + "\0" + filled + "\0" + remaining + "\0" + avgFillPrice + "\0";
	  return new DataInputStream(new StringBufferInputStream(input));
	}

    Although this version number ensures that all if's are covered, the lines within each one have not yet been covered.
    For that we need to change the method as follows:

      public static DataInputStream orderStatus() {
        //first input of values
	  String switchCase = "3", version = "6", id = "2", status = "status", filled = "7", remaining = "8", avgFillPrice = "2.64";
	  String firstInput = switchCase + "\0" + version + "\0" + id + "\0" + status + "\0" + filled + "\0" + remaining + "\0" + avgFillPrice + "\0";
	  //second input of values, all this values are inside the if cases
	  String permId = "0", parentId = "10", lastFillPrice = "6.9", clientId = "5", whyHeld = "whyHeld";
	  String secondInput = permId + "\0" + parentId + "\0" + lastFillPrice + "\0" + clientId + "\0" + whyHeld + "\0";
		
	  return new DataInputStream(new StringBufferInputStream(firstInput + secondInput));
	}
    
    We could create differents factories to enter each if at a time, but its not necessary based on the conditions of them.
